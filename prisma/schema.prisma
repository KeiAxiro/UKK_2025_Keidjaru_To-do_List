// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

// enum Priority {
//   LOW
//   MEDIUM
//   HIGH
// }

// enum RoleUser {
//   ADMIN
//   USER
// }

// model User {
//   id        String   @id @default(uuid())
//   username  String   @unique @db.VarChar(50)
//   email     String   @unique @db.VarChar(100)
//   password  String   @db.VarChar(255)
//   role      RoleUser @default(USER)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   lists     List[]
//   tags      Tag[]
// }

// model List {
//   id          String   @id @default(uuid())
//   userId      String
//   name        String   @db.VarChar(100)
//   description String?  @db.Text
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   tasks       Task[]
// }

// model Task {
//   id          String    @id @default(uuid())
//   listId      String
//   title       String    @db.VarChar(150)
//   description String?   @db.Text
//   priority    Priority  @default(MEDIUM)
//   isCompleted Boolean   @default(false)

//   dueDate     DateTime? @db.Timestamptz
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
//   subtasks    Subtask[]
//   taskTags    TaskTag[]

//   @@index([isCompleted])
//   @@index([dueDate])
// }

// model Subtask {
//   id          String   @id @default(uuid())
//   taskId      String
//   title       String   @db.VarChar(150)
//   isCompleted Boolean  @default(false)

//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
// }

// model Tag {
//   id        String   @id @default(uuid())
//   userId    String
//   name      String   @db.VarChar(50)
//   description String? @db.Text

//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   taskTags  TaskTag[]

//   @@unique([userId, name]) // Mencegah duplikasi tag dengan nama yang sama untuk satu user
// }

// model TaskTag {
//   taskId String
//   tagId  String

//   task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
//   tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

//   @@id([taskId, tagId]) // Primary key gabungan untuk relasi many-to-many
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      RoleUser @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lists     List[]
}

model List {
  id          String   @id @default(uuid())
  userId      String
  name        String   @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id          String    @id @default(uuid())
  listId      String
  title       String    @db.VarChar(150)
  description String?   @db.Text
  isCompleted Boolean   @default(false)
  dueDate     DateTime? @db.Timestamptz
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([isCompleted])
  @@index([dueDate])
}