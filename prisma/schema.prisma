// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum Priority {
  LOW
  MEDIUM
  HIGH
}
enum RoleUser {
  ADMIN
  USER
}
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      RoleUser @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lists     List[]
  tags      Tag[]
}

model List {
  id        String   @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id          String    @id @default(uuid())
  listId      String
  title       String
  description String?
  priority    Priority   @default(MEDIUM)
  isCompleted Boolean    @default(false)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  list        List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  subtasks    Subtask[]
  taskTags    TaskTag[]
}

model Subtask {
  id          String    @id @default(uuid())
  taskId      String
  title       String
  isCompleted Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(uuid())
  userId    String
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskTags  TaskTag[]
}

model TaskTag {
  taskId String
  tagId  String
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([taskId, tagId])
}

